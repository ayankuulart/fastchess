<!DOCTYPE html>
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    meta(http-equiv="X-UA-Compatible" content="ie=edge")
    script(src="https://unpkg.com/axios/dist/axios.min.js")
    title Document
  body(style="background: #222")
    h2(style="color: #fff") SignUp
    form(id="sign-up-form")
      input(type="text" name="login" placeholder="Login" requried)
      br
      input(type="password" name="password" placeholder="Password" requried)
      br
      input(type="text" name="firstName" placeholder="First name")
      br
      input(type="text" name="lastName" placeholder="Last name")
      br
      input(type="text" name="age" placeholder="Age")
      br
      button Submit
    h2(style="color: #fff") SignIn
    form(id="sign-in-form")
      input(type="text" name="login" placeholder="Login" requried)
      br
      input(type="password" name="password" placeholder="Password" requried)
      br
      button Submit
    h2(style="color: #fff") Check authentication
    br
    button(id="check-auth-btn") Check Auth
    br
    button(id="refresh-tokens-btn") Refresh tokens
  script.
    const signUpForm = document.getElementById("sign-up-form");
    const signInForm = document.getElementById("sign-in-form");
    const checkAuthBtn = document.getElementById("check-auth-btn");
    const refreshTokenBtn = document.getElementById("refresh-tokens-btn");

    signUpForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const data = {};

      for (var i = 0; i < signUpForm.children.length; i++) {
        const element = signUpForm.children[i];
        if (element.tagName === 'INPUT') {
          data[element.name] = element.value;
        }
      }
      axios.post('/signup', data).then(response => console.log(response));
    });

    signInForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const data = {};

      for (var i = 0; i < signInForm.children.length; i++) {
        const element = signInForm.children[i];
        if (element.tagName === 'INPUT') {
          data[element.name] = element.value;
        }
      }
      axios.post('/signin', data).then(response => {
        console.log('/signin returned', response);
        localStorage.setItem('accessToken', response.data.access_token);
        localStorage.setItem('refreshToken', response.data.refresh_token);
      });
    });

    checkAuthBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const data = {};

      axios.get('/game/check-auth', { headers: { Authorization: localStorage.getItem('accessToken') } }).then(data => console.log(data));
    });

    refreshTokenBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const data = {};

      axios.get('/refresh-token', { headers: { Authorization: localStorage.getItem('refreshToken') } }).then(response => {
        localStorage.setItem('accessToken', response.data.access_token);
        localStorage.setItem('refreshToken', response.data.refresh_token);
      });
    });